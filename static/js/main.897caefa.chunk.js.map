{"version":3,"sources":["util/codeSnippets.js","components/CodeEditor.js","services/compileCall.js","components/BasicCompilation.js","components/Header.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["code_snippet_dic","CodeEditor","props","state","code","cpp","language","onEditorChange","style","padding","Select","id","value","this","onChange","handleChangelang","e","setState","target","MenuItem","backgroundColor","margin","minHeight","maxHeight","overflowY","onValueChange","c","highlight","languages","fontFamily","fontSize","React","Component","compileRequest","flag","file","formData","FormData","append","axios","post","headers","BasicCompilation","Button","variant","onClick","isFile","then","resp","console","log","onOutputChange","data","color","Header","Navbar","collapseOnSelect","expand","bg","Brand","href","Toggle","aria-controls","Collapse","Nav","className","Link","App","useState","setCode","output","setOutput","setLanguage","Container","Row","Col","md","l","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"sOAqBeA,G,8BArBM,CACjB,EAAI,oEAKJ,IAAM,sGAMN,KAAO,oK,kBCsDIC,E,kDA5Cb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAO,CAAEC,KAAKJ,EAAiBK,IAAKC,SAAS,OAC/C,EAAKJ,MAAMK,gBACZ,EAAKL,MAAMK,eAAe,EAAKJ,MAAMG,SAAS,EAAKH,MAAMC,MAJ3C,E,qDAMR,IAAD,OACP,OACA,6BACE,yBAAKI,MAAO,CAACC,QAAQ,QACnB,kBAACC,EAAA,EAAD,CACEC,GAAG,WACHC,MAAOC,KAAKV,MAAMG,SAClBQ,SAAUD,KAAKE,iBAAiB,SAACC,GAAK,EAAKC,SAAS,CAACX,SAASU,EAAEE,OAAON,MAAMR,KAAKJ,EAAiBgB,EAAEE,OAAON,SACzG,EAAKV,MAAMK,gBACd,EAAKL,MAAMK,eAAe,EAAKJ,MAAMG,SAAS,EAAKH,MAAMC,QAEzD,kBAACe,EAAA,EAAD,CAAUP,MAAO,OAAjB,OACA,kBAACO,EAAA,EAAD,CAAUP,MAAO,KAAjB,KACA,kBAACO,EAAA,EAAD,CAAUP,MAAO,QAAjB,UAGJ,yBAAKJ,MAAO,CAACY,gBAAgB,UAAWC,OAAO,MAAOC,UAAU,QAAQC,UAAU,QAAQC,UAAU,WACpG,kBAAC,IAAD,CACEZ,MAAOC,KAAKV,MAAMC,KAClBqB,cAAe,SAAAC,GAAM,EAAKT,SAAS,CAAEb,KAAKsB,IAAI,WACzC,EAAKxB,MAAMK,gBACd,EAAKL,MAAMK,eAAe,EAAKJ,MAAMG,SAAS,EAAKH,MAAMC,UAG3DuB,UAAW,SAAAvB,GAAI,OAAIuB,oBAAUvB,EAAMwB,YAAUvB,MAC7CI,QAAS,GACTD,MAAO,CACLqB,WAAY,sCACZC,SAAU,Y,GAnCKC,IAAMC,W,0BCjBhB,SAASC,EAAeC,EAAKC,EAAK/B,EAAKE,GAClD,IAAI8B,EAAU,IAAIC,SACfH,GACHE,EAASE,OAAO,iBAAiBH,GACjCC,EAASE,OAAO,gBAAgB,QAI5BF,EAASE,OAAO,iBAAiB,MACjCF,EAASE,OAAO,gBAAgBlC,IAEpCgC,EAASE,OAAO,WAAWhC,GAOzB,OAAOiC,IAAMC,KApBH,oDAoBgBJ,EANV,CACdK,QAAS,CACL,eAAgB,yBCOZC,MAtBhB,SAA0BxC,GAapB,OACI,6BACA,kBAACyC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAdf,WACZ3C,EAAM4C,OACRb,GAAe,EAAK/B,EAAMiC,KAAK,GAAGjC,EAAMI,UAAUyC,MAAK,SAACC,GACjDC,QAAQC,IAAIF,GACZ9C,EAAMiD,eAAeH,EAAKI,SAG9BnB,GAAe,EAAM,GAAG/B,EAAME,KAAKF,EAAMI,UAAUyC,MAAK,SAACC,GACrDC,QAAQC,IAAIF,GACZ9C,EAAMiD,eAAeH,EAAKI,UAKqBC,MAAM,WAA3D,Y,+DCGKC,MAnBf,SAAgBpD,GAEhB,OACA,kBAACqD,EAAA,EAAD,CAAQC,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOd,QAAQ,QACrD,kBAACW,EAAA,EAAOI,MAAR,CAAcC,KAAK,SAAnB,cAIA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,0BAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBpD,GAAG,yBAClB,kBAACqD,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUN,KAAK,UAAf,SACA,kBAACI,EAAA,EAAIE,KAAL,CAAUN,KAAK,UAAf,cCgCSO,MAnCf,WAAgB,IAAD,EACQC,mBAAS,IADjB,mBACNhE,EADM,KACDiE,EADC,OAEYD,mBAAS,IAFrB,mBAENE,EAFM,KAECC,EAFD,OAGgBH,mBAAS,IAHzB,mBAGN9D,EAHM,KAGGkE,EAHH,KASb,OACE,6BACD,kBAAC,EAAD,MACC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACF,kBAACC,EAAA,EAAD,CAAKC,GAAI,GACV,kBAAC,EAAD,CAAYrE,eAXQ,SAACsE,EAAEnD,GACtB8C,EAAYK,GACZR,EAAQ3C,OAWT,kBAACiD,EAAA,EAAD,CAAKC,GAAI,GACP,yBAAKpE,MAAO,CAAEsE,UAAU,QACxB,uCAEH,2BAAKR,KAGJ,kBAACI,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACF,kBAAC,EAAD,CAAkBxB,eAlBE,SAACmB,GAAD,OAAUC,EAAUD,IAkBUxB,QAAQ,EAAO1C,KAAMA,EAAME,SAAUA,SCzBtEyE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a,6EEzI5BC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.897caefa.chunk.js","sourcesContent":["let code_snippet_dic={\r\n    \"c\":`#include<iostream.h>\r\n    int main(){\r\n    return 0;\r\n}\r\n        `,\r\n    \"cpp\":`#include<iostream>\r\n    using namespace ::std;\r\n    int main(){\r\n        return 0;\r\n    }\r\n        `,\r\n    'java':`\r\n        public class HelloWorld{\r\n\r\n            public static void main(String []args){\r\n            System.out.println(\"Hello World\");\r\n            }\r\n    }`\r\n}\r\n\r\nexport default code_snippet_dic;","import React from 'react';\r\nimport Editor from 'react-simple-code-editor';\r\nimport { highlight, languages } from 'prismjs/components/prism-core';\r\nimport 'prismjs/components/prism-clike';\r\nimport 'prismjs/components/prism-c';\r\nimport 'prismjs/components/prism-java';\r\nimport 'prismjs/components/prism-cpp';\r\nimport 'prismjs/themes/prism.css';\r\nimport code_snippet_dic from '../util/codeSnippets';\r\nimport Select from '@material-ui/core/Select';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nconst code2 = `function add(a, b) {\r\n  return a + b;\r\n}\r\n`;\r\nconst code = `#include<iostream.h>\r\nint main(){\r\n  return 2;\r\n}\r\n`;\r\n\r\nclass CodeEditor extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={ code:code_snippet_dic.cpp, language:\"cpp\" };\r\n    if(this.props.onEditorChange)\r\n      this.props.onEditorChange(this.state.language,this.state.code);\r\n  }\r\n  render() {\r\n    return (\r\n    <div>\r\n      <div style={{padding:\"1em\"}}>\r\n        <Select\r\n          id=\"language\"\r\n          value={this.state.language}\r\n          onChange={this.handleChangelang=(e)=>{this.setState({language:e.target.value,code:code_snippet_dic[e.target.value]});\r\n          if(this.props.onEditorChange)\r\n          this.props.onEditorChange(this.state.language,this.state.code);\r\n          }}>\r\n          <MenuItem value={\"cpp\"}>cpp</MenuItem>\r\n          <MenuItem value={\"c\"}>c</MenuItem>\r\n          <MenuItem value={\"java\"}>java</MenuItem>\r\n        </Select>\r\n      </div>\r\n      <div style={{backgroundColor:\"#f1f1f1\", margin:\"1em\", minHeight:\"450px\",maxHeight:\"450px\",overflowY:\"scroll\"}}>\r\n      <Editor\r\n        value={this.state.code}\r\n        onValueChange={c => {this.setState({ code:c },()=>{\r\n          if(this.props.onEditorChange)\r\n          this.props.onEditorChange(this.state.language,this.state.code);\r\n        });\r\n      }}\r\n        highlight={code => highlight(code, languages.cpp)}\r\n        padding={10}\r\n        style={{\r\n          fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\r\n          fontSize: 12,\r\n        }}\r\n      />\r\n      </div>\r\n\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CodeEditor;","import axios from 'axios';\r\n\r\nconst API_URL = 'https://mycompiler.cfapps.io/uploadFileToS3Bucket'\r\n\r\nexport default function compileRequest(flag,file,code,language){\r\n    var formData= new FormData();\r\n    if(flag){  \r\n    formData.append('uploadingFiles',file);\r\n    formData.append('uploadingCode',null);\r\n    }\r\n    else{\r\n       \r\n        formData.append('uploadingFiles',null);\r\n        formData.append('uploadingCode',code);\r\n    }\r\n    formData.append('language',language);\r\n    let axiosConfig = {\r\n        headers: {\r\n            'content-type': 'multipart/form-data'\r\n        }\r\n      };\r\n  \r\n      return axios.post(API_URL,formData,axiosConfig );\r\n}","import React from 'react';\r\nimport Button  from '@material-ui/core/Button';\r\nimport compileRequest from '../services/compileCall';\r\nfunction BasicCompilation(props)  {\r\n    const handleSubmit=()=>{\r\n        if(props.isFile)\r\n         compileRequest(true,props.file,\"\",props.language).then((resp)=>{\r\n                console.log(resp);\r\n                props.onOutputChange(resp.data);\r\n            });\r\n        else  \r\n            compileRequest(false,\"\",props.code,props.language).then((resp)=>{\r\n                console.log(resp);\r\n                props.onOutputChange(resp.data);\r\n            });\r\n    }\r\n      return (\r\n          <div>\r\n          <Button variant=\"contained\" onClick={ handleSubmit } color=\"default\" >\r\n        Submit\r\n      </Button>\r\n          </div>\r\n      );\r\n    \r\n}\r\n export default BasicCompilation;","import React from 'react';\r\nimport { Nav , Navbar , NavDropdown  } from 'react-bootstrap';\r\nfunction Header(props){\r\n    \r\nreturn (\r\n<Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n  <Navbar.Brand href=\"#home\">\r\n  CompileAll\r\n  </Navbar.Brand>\r\n  \r\n  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n  <Navbar.Collapse id=\"responsive-navbar-nav\">\r\n    <Nav className=\"ml-auto\">\r\n      <Nav.Link href=\"#deets\">Login</Nav.Link>\r\n      <Nav.Link href=\"#deets\">SignUp</Nav.Link>\r\n\r\n    </Nav>\r\n  </Navbar.Collapse>\r\n</Navbar>);\r\n}\r\n\r\nexport default Header;","import React from 'react';\nimport logo from './logo.svg';\nimport CodeEditor from './components/CodeEditor';\nimport {useState} from 'react';\nimport BasicCompilation from './components/BasicCompilation';\nimport { languages } from 'prismjs';\nimport { Container , Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Typography from '@material-ui/core/Typography';\nimport Header from './components/Header';\nfunction App() {\n  const [code,setCode]=useState(\"\");\n  const [output,setOutput]=useState(\"\");\n  const [language,setLanguage]=useState(\"\");\n  const onEditorChange=(l,c)=>{\n    setLanguage(l);\n    setCode(c);\n  };\n  const onOutputChange=(output)=>setOutput(output);\n  return (\n    <div>\n   <Header/>\n    <Container>\n      <Row>\n    <Col md={7}>\n   <CodeEditor onEditorChange={onEditorChange}></CodeEditor>\n   </Col>\n   <Col md={5}>\n     <div style={{ marginTop:\"1em\" }}>\n     <h3>Output</h3>\n     </div>\n  <p>{ output }</p>\n  </Col>\n   </Row>\n   <Row>\n     <Col>\n   <BasicCompilation onOutputChange={onOutputChange} isFile={false} code={code} language={language}></BasicCompilation>\n   </Col>\n   </Row>\n \n   </Container>\n   </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}